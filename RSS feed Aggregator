import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from an XML file into the
 * corresponding HTML output file and consolidates them into one HTML page.
 * 
 * @author Vivek Murahari.
 * 
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * <html> <head> the channel tag title as the page title the page title
     * inside a link to the <channel> link
     * <p>
     * the channel description
     * </p>
     * <table>
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     * </table>
     * 
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates {@code out.content}
     * @requires <pre>
     * 
     *           {@code [the root of channel is a <channel> tag] and
     *           out.is_open}
     * 
     * </pre>
     * @ensures <pre>
     * 
     *          {@code out.content = #out.content * [the HTML "opening" tags]}
     * 
     * </pre>
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int a = getChildElement(channel, "title");
        int b = getChildElement(channel, "link");
        int c = getChildElement(channel, "description");

        out.println("<html><head><title>");
        out.println(channel.child(a).child(0));
        out.println("</title></head>");
        out.println("<body><h1>" + "<a href=" + channel.child(b).child(0) + ">"
                + channel.child(a).child(0));
        out.print("</a></h1>");
        out.println("<p1>" + channel.child(c) + "</p1>");
        out.println("<table border = 1>");

        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * 
     * @param out
     *            the output stream
     * @updates {@code out.contents}
     * @requires <pre>
     * {@code out.is_open}
     * </pre>
     * @ensures <pre>
     * {@code out.content = #out.content * [the HTML "closing" tags]}
     * </pre>
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table></body></html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     * 
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires <pre>
     * {@code [the label of the root of xml is a tag]}
     * </pre>
     * @ensures <pre>
     * {@code getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]}
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        boolean found = false;
        int i = 0;
        while (i < xml.numberOfChildren()) {
            if (xml.child(i).label().equals(tag)) {
                found = true;
                break;
            } else {
                i = i + 1;
            }
        }
        int a = 0;

        if (found) {
            a = i;
        }
        if (!found) {
            a = -1;
        }
        return a;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     * 
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates {@code out.content}
     * @requires <pre>
     * {@code [the label of the root of item is an <item> tag] and out.is_open}
     * </pre>
     * @ensures <pre>
     * {@code out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]}
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int date = getChildElement(item, "pubDate");
        int link = getChildElement(item, "link");
        int title = getChildElement(item, "title");
        int source = getChildElement(item, "source");

        out.println("<tr>");
        if (date != -1) {
            out.println("<td>" + item.child(date).child(0) + "</td>");
        } else {
            out.println("<td>" + "Not Available" + "</td>");
        }
        if (source != -1) {
            out.println("<td>" + "<a href="
                    + item.child(source).attributeValue("url") + ">"
                    + item.child(source).child(0) + "</td>");
        } else {
            out.println("<td>" + "Not Available" + "</td>");
        }
        if (title != -1) {
            out.println("<td>" + "<a href=" + item.child(link).child(0) + ">"
                    + item.child(title).child(0) + "</td>");
        } else {
            out.println("<td>" + "Not Available" + "</td>");
        }

        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     * 
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates {@code out.content}
     * @requires <pre>
     * {@code out.is_open}
     * </pre>
     * @ensures <pre>
     * {@code [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]}
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        int title = getChildElement(xml.child(0), "title");
        out.println("<li><a href=" + file + ">"
                + xml.child(0).child(title).child(0).label() + "</a></li>");
    }

    /**
     * Main method.
     * 
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter output = new SimpleWriter1L();

        output.println("Enter the name of the XML file: ");
        String input = in.nextLine();
        output.println("Enter output file name: ");
        String html = in.nextLine();
        SimpleWriter indexhtml = new SimpleWriter1L(html);
        indexhtml.println("<html>");
        indexhtml.println("<head>");
        indexhtml.println("<title>" + "Top Stories" + "</title>");
        indexhtml.println("</head>");
        indexhtml.println("<body>");
        indexhtml.println("<h2>" + "Top Stories" + "</h2>");
        indexhtml.println("<u1>");

        XMLTree urltree = new XMLTree1(input);

        int feeds = 0;
        while (feeds < urltree.numberOfChildren()) {
            String url = urltree.child(feeds).attributeValue("url");
            XMLTree xml = new XMLTree1(url);
            SimpleWriter tohtml = new SimpleWriter1L(urltree.child(feeds)
                    .attributeValue("file"));
            outputHeader(xml.child(0), tohtml);

            int i = 0;
            while (i < xml.child(0).numberOfChildren()) {
                if (xml.child(0).child(i).label().equals("item")) {
                    processItem(xml.child(0).child(i), tohtml);
                    i = i + 1;
                } else {
                    i = i + 1;
                }
            }
            outputFooter(tohtml);
            tohtml.close();

            processFeed(url, urltree.child(feeds).attributeValue("file"),
                    indexhtml);

            feeds++;

        }
        indexhtml.println("</ul></body></html>");

        indexhtml.close();
        in.close();
        output.close();

    }
}
